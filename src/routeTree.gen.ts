/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as NotificationsRouteImport } from './routes/notifications'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ConnectionsRouteImport } from './routes/connections'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProfileIndexRouteImport } from './routes/profile/index'
import { Route as ProfileUserIdRouteImport } from './routes/profile/$userId'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ConnectionsRoute = ConnectionsRouteImport.update({
  id: '/connections',
  path: '/connections',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileIndexRoute = ProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileUserIdRoute = ProfileUserIdRouteImport.update({
  id: '/profile/$userId',
  path: '/profile/$userId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/connections': typeof ConnectionsRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/notifications': typeof NotificationsRoute
  '/signup': typeof SignupRoute
  '/profile/$userId': typeof ProfileUserIdRoute
  '/profile': typeof ProfileIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/connections': typeof ConnectionsRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/notifications': typeof NotificationsRoute
  '/signup': typeof SignupRoute
  '/profile/$userId': typeof ProfileUserIdRoute
  '/profile': typeof ProfileIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/connections': typeof ConnectionsRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/notifications': typeof NotificationsRoute
  '/signup': typeof SignupRoute
  '/profile/$userId': typeof ProfileUserIdRoute
  '/profile/': typeof ProfileIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/connections'
    | '/dashboard'
    | '/login'
    | '/notifications'
    | '/signup'
    | '/profile/$userId'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/connections'
    | '/dashboard'
    | '/login'
    | '/notifications'
    | '/signup'
    | '/profile/$userId'
    | '/profile'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/connections'
    | '/dashboard'
    | '/login'
    | '/notifications'
    | '/signup'
    | '/profile/$userId'
    | '/profile/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  ConnectionsRoute: typeof ConnectionsRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  NotificationsRoute: typeof NotificationsRoute
  SignupRoute: typeof SignupRoute
  ProfileUserIdRoute: typeof ProfileUserIdRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/connections': {
      id: '/connections'
      path: '/connections'
      fullPath: '/connections'
      preLoaderRoute: typeof ConnectionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/$userId': {
      id: '/profile/$userId'
      path: '/profile/$userId'
      fullPath: '/profile/$userId'
      preLoaderRoute: typeof ProfileUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  ConnectionsRoute: ConnectionsRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  NotificationsRoute: NotificationsRoute,
  SignupRoute: SignupRoute,
  ProfileUserIdRoute: ProfileUserIdRoute,
  ProfileIndexRoute: ProfileIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
